raw <- read.csv('pilotdatawithadults.csv')
raw <- read.csv('pilotdatawithadults.csv')
raw <- read.csv('pilotdatawithadults.csv')
raw <- read.csv('pilot.csv')
setwd("~/Desktop/pilot")
raw <- read.csv('pilot.csv')
raw <- read.csv('pilot.csv')
raw <- read.csv('pilot.csv')
raw <- read.csv('pilot.csv')
raw <- read.csv('pilot.csv')
raw <- read.csv('pilot.csv')
repdata <- read.csv('pilot.csv')
repdata %>%
dplyr::select(ID,5:12)
repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(intention=ifelse(substr(condition,1,2)=='Or','unwilling','unable'))
repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(intention=ifelse(substr(condition,1,2)=='Or','unwilling','unable')) %>%
mutate (target=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
table(longrepdata$intention,longrepdata$target)
longrepdata <- repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(intention=ifelse(substr(condition,1,2)=='Or','unwilling','unable')) %>%
mutate (target=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
table(longrepdata$intention,longrepdata$target)
# fit maximal model
Mmax <- lmer(response ~ target*intention*AgeCentered + (1|ID),data=longStudy2)
summary(Mmax)z
drop1(Mmax, test='Chisq')
# drop 3-way via LRT
M2way <- lmer(response ~ (target+intention+AgeCentered)^2 + (1|ID),data=longStudy2)
summary(M2way)
drop1(M2way, test='Chisq')
# drop intention:age
M2way2 <- lmer(response ~ target+intention+AgeCentered+target:intention+target:AgeCentered + (1|ID),data=longStudy2)
summary(M2way2)
drop1(M2way2, test='Chisq')
Mmax <- lmer(response ~ target*intention*AgeCentered + (1|ID),data=longrepdata)
summary(Mmax)z
# Study2
substrRight <- function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
longStudy2Graph <- Study2 %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(Ttype=substr(condition,1,2)) %>%
mutate (Ctype=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
longStudy2Graph$Ttype<-factor(longStudy2Graph$Ttype,levels=c("Or","Co"))#Change the order for Ttype
longStudy2Graph$Ctype<-factor(longStudy2Graph$Ctype,levels=c("FreeRider","Contributor"))#change the order for Ctype
reordergraph2 <- ggplot(longStudy2Graph,aes(x=Ctype, y = response, width=.65, fill = as.factor(Ttype))) +
stat_summary(fun.y=mean, geom="bar", position=position_dodge()) +
stat_summary(fun.data="mean_cl_boot", geom="errorbar",  aes(width=.15), position=position_dodge(.65))
reordergraph2
graph2<-(reordergraph2 +
theme(legend.title=element_blank()) +
scale_x_discrete(breaks=c("Contributor", "FreeRider"),labels=c("Contributor", "Free Rider")) +
scale_y_continuous(limits=c(1,4),oob=squish,expand = c(0,0))+
ylab("Rating (1 = most negative, 4 = most positive)") +
xlab("Target") +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
theme(legend.title=element_blank()) +
scale_fill_manual(values=c("#99CC99", "#FFCC99"),breaks=c("Co", "Or"),labels=c("Unintentional Free-Riding", "Intentional Free-Riding")) +
geom_hline(yintercept = 2.5, linetype=2, color='black')+
guides(fill = guide_legend(reverse = TRUE))+ #reverse the legend order
ggtitle("4-5-year-olds") + theme(plot.title=element_text(hjust = "0", face="bold"))+
theme(legend.position="top") +
theme(legend.direction="horizontal")+
theme(plot.title = element_text(size = 12, face = "bold") , legend.text=element_text(size=9))+
theme(axis.text=element_text(size=10,face="bold"), axis.title=element_text(size=10,face="bold")))
graph2
# intentional vs unintentional free riders
longrepdata %>%
filter(target=='FreeRider') %>%
group_by(intention) %>%
summarise(avg = mean(response))
# compute d
cohen.d(response ~ intention, data=filter(longrepdata,target=='FreeRider'))
## Compute effect sizes: d for various simple contrasts
# output means of free riders vs contributors
longrepdata %>%
group_by(target) %>%
summarise(avg = mean(response))
# compute d
cohen.d(response ~ target, data=longrepdata)
# use above as final model
options(contrasts = c("contr.SAS", "contr.SAS'"))  # relevel contrasts to unintentional and contributor, respectively
Study2final<-lmer(response ~ target+intention+AgeCentered+target:intention+target:AgeCentered + (1|ID),data=longStudy2)
summary(Study2final)
confint(Study2final) # output confidence intervals
options(contrasts = c("contr.SAS", "contr.SAS'"))  # relevel contrasts to unintentional and contributor, respectively
Study2final<-lmer(response ~ target+intention+AgeCentered+target:intention+target:AgeCentered + (1|ID),data=longrepdata)
summary(Study2final)
confint(Study2final) # output confidence intervals
?lmer
# fit maximal model
Mmax <- lmer(response ~ target*intention*AgeCentered + (1|ID),data=longStudy2)
summary(Mmax)
drop1(Mmax, test='Chisq')
Mmax <- lmer(response ~ target*intention*AgeCentered + (1|ID),data=longrepdata)
summary(Mmax)z
drop1(Mmax, test='Chisq')
Mmax <- lmer(response ~ target*intention + (1|ID),data=longrepdata)
summary(Mmax)z
drop1(Mmax, test='Chisq')
M2way <- lmer(response ~ (target+intention)^2 + (1|ID),data=longrepdata)
summary(M2way)
drop1(M2way, test='Chisq')
M2way2 <- lmer(response ~ target+intention+target:intention + (1|ID),data=longrepdata)
summary(M2way2)
drop1(M2way2, test='Chisq')
options(contrasts = c("contr.SAS", "contr.SAS'"))  # relevel contrasts to unintentional and contributor, respectively
Study2final<-lmer(response ~ target+intention+AgeCentered+target:intention+target:AgeCentered + (1|ID),data=longrepdata)
summary(Study2final)
confint(Study2final)
longrepdata %>%
group_by(target) %>%
summarise(avg = mean(response))
cohen.d(response ~ target, data=longrepdata)
longrepdata %>%
filter(target=='FreeRider') %>%
group_by(intention) %>%
summarise(avg = mean(response))
cohen.d(response ~ intention, data=filter(longrepdata,target=='FreeRider'))
substrRight <- function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
longStudy2Graph <- Study2 %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(Ttype=substr(condition,1,2)) %>%
mutate (Ctype=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
longStudy2Graph$Ttype<-factor(longStudy2Graph$Ttype,levels=c("Or","Co"))#Change the order for Ttype
longStudy2Graph$Ctype<-factor(longStudy2Graph$Ctype,levels=c("FreeRider","Contributor"))#change the order for Ctype
reordergraph2 <- ggplot(longStudy2Graph,aes(x=Ctype, y = response, width=.65, fill = as.factor(Ttype))) +
stat_summary(fun.y=mean, geom="bar", position=position_dodge()) +
stat_summary(fun.data="mean_cl_boot", geom="errorbar",  aes(width=.15), position=position_dodge(.65))
reordergraph2
graph2<-(reordergraph2 +
theme(legend.title=element_blank()) +
scale_x_discrete(breaks=c("Contributor", "FreeRider"),labels=c("Contributor", "Free Rider")) +
scale_y_continuous(limits=c(1,4),oob=squish,expand = c(0,0))+
ylab("Rating (1 = most negative, 4 = most positive)") +
xlab("Target") +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
theme(legend.title=element_blank()) +
scale_fill_manual(values=c("#99CC99", "#FFCC99"),breaks=c("Co", "Or"),labels=c("Unintentional Free-Riding", "Intentional Free-Riding")) +
geom_hline(yintercept = 2.5, linetype=2, color='black')+
guides(fill = guide_legend(reverse = TRUE))+ #reverse the legend order
ggtitle("4-5-year-olds") + theme(plot.title=element_text(hjust = "0", face="bold"))+
theme(legend.position="top") +
theme(legend.direction="horizontal")+
theme(plot.title = element_text(size = 12, face = "bold") , legend.text=element_text(size=9))+
theme(axis.text=element_text(size=10,face="bold"), axis.title=element_text(size=10,face="bold")))
graph2
###Data Preparation
# required packages
####Load Relevant Libraries and Functions
library(tidyverse)   # 1.00
library(lme4)  # lmer / glmer  1.1-16
library(effsize) # cohens d calculator  0.7.1
library(optimx) # additional optimizers for glmer  2013.8.7
####Import data
repdata <- read.csv('pilot.csv')
setwd("~/Desktop/yang2018/writeup")
###Data Preparation
# required packages
####Load Relevant Libraries and Functions
library(tidyverse)   # 1.00
library(lme4)  # lmer / glmer  1.1-16
library(effsize) # cohens d calculator  0.7.1
library(optimx) # additional optimizers for glmer  2013.8.7
####Import data
repdata <- read.csv('pilot.csv')
#### Data exclusion / filtering
#### Prepare data for analysis - create columns etc.
# convert to long format
longrepdata <- repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(intention=ifelse(substr(condition,1,2)=='Or','unwilling','unable')) %>%
mutate (target=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
# sanity check: check balance
table(longrepdata$intention,longrepdata$target)
# fit maximal model
Mmax <- lmer(response ~ target*intention + (1|ID),data=longrepdata)
summary(Mmax)z
longrepdata <- repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(intention=ifelse(substr(condition,1,2)=='Or','unwilling','unable')) %>%
mutate (target=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
table(longrepdata$intention,longrepdata$target)
Mmax <- lmer(response ~ target*intention + (1|ID),data=longrepdata)
summary(Mmax)z
###Data Preparation
# required packages
####Load Relevant Libraries and Functions
library(tidyverse)   # 1.00
library(lme4)  # lmer / glmer  1.1-16
library(effsize) # cohens d calculator  0.7.1
library(optimx) # additional optimizers for glmer  2013.8.7
####Import data
repdata <- read.csv('pilot.csv')
#### Data exclusion / filtering
#### Prepare data for analysis - create columns etc.
# convert to long format
longrepdata <- repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(intention=ifelse(substr(condition,1,2)=='Or','unwilling','unable')) %>%
mutate (target=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
# sanity check: check balance
table(longrepdata$intention,longrepdata$target)
# fit maximal model
Mmax <- lmer(response ~ target*intention + (1|ID),data=longrepdata)
summary(Mmax)z
library(tidyverse)   # 1.00
library(lme4)  # lmer / glmer  1.1-16
library(effsize) # cohens d calculator  0.7.1
library(optimx) # additional optimizers for glmer  2013.8.7
repdata <- read.csv('pilot.csv')
longrepdata <- repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(intention=ifelse(substr(condition,1,2)=='Or','unwilling','unable')) %>%
mutate (target=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
table(longrepdata$intention,longrepdata$target)
Mmax <- lmer(response ~ target*intention + (1|ID),data=longrepdata)
summary(Mmax)z
# drop 3-way via LRT
M2way <- lmer(response ~ (target+intention)^2 + (1|ID),data=longrepdata)
summary(M2way)
drop1(M2way, test='Chisq')
# drop intention:age
M2way2 <- lmer(response ~ target+intention+target:intention + (1|ID),data=longrepdata)
summary(M2way2)
drop1(M2way2, test='Chisq')
Mmax <- lmer(response ~ target*intention + (1|ID),data=longrepdata)
summary(Mmax)
drop1(Mmax, test='Chisq')
M2way <- lmer(response ~ (target+intention)^2 + (1|ID),data=longrepdata)
summary(M2way)
drop1(M2way, test='Chisq')
# drop intention:age
M2way2 <- lmer(response ~ target+intention+target:intention + (1|ID),data=longrepdata)
summary(M2way2)
drop1(M2way2, test='Chisq')
# use above as final model
options(contrasts = c("contr.SAS", "contr.SAS'"))  # relevel contrasts to unintentional and contributor, respectively
Study2final<-lmer(response ~ target+intention+AgeCentered+target:intention+target:AgeCentered + (1|ID),data=longrepdata)
# intentional vs unintentional free riders
longrepdata %>%
filter(target=='FreeRider') %>%
group_by(intention) %>%
summarise(avg = mean(response))
# compute d
cohen.d(response ~ intention, data=filter(longrepdata,target=='FreeRider'))
# use above as final model
options(contrasts = c("contr.SAS", "contr.SAS'"))  # relevel contrasts to unintentional and contributor, respectively
Study2final<-lmer(response ~ target+intention+target:intention + (1|ID),data=longrepdata)
summary(Study2final)
confint(Study2final) # output confidence intervals
## Compute effect sizes: d for various simple contrasts
# output means of free riders vs contributors
longrepdata %>%
group_by(target) %>%
summarise(avg = mean(response))
# compute d
cohen.d(response ~ target, data=longrepdata)
# intentional vs unintentional free riders
longrepdata %>%
filter(target=='FreeRider') %>%
group_by(intention) %>%
summarise(avg = mean(response))
# compute d
cohen.d(response ~ intention, data=filter(longrepdata,target=='FreeRider'))
# Study2
substrRight <- function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
longStudy2Graph <- Study2 %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(Ttype=substr(condition,1,2)) %>%
mutate (Ctype=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
# Study2
substrRight <- function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
longStudy2Graph <- repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(Ttype=substr(condition,1,2)) %>%
mutate (Ctype=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
longStudy2Graph$Ttype<-factor(longStudy2Graph$Ttype,levels=c("Or","Co"))#Change the order for Ttype
longStudy2Graph$Ctype<-factor(longStudy2Graph$Ctype,levels=c("FreeRider","Contributor"))#change the order for Ctype
reordergraph2 <- ggplot(longStudy2Graph,aes(x=Ctype, y = response, width=.65, fill = as.factor(Ttype))) +
stat_summary(fun.y=mean, geom="bar", position=position_dodge()) +
stat_summary(fun.data="mean_cl_boot", geom="errorbar",  aes(width=.15), position=position_dodge(.65))
reordergraph2
graph2<-(reordergraph2 +
theme(legend.title=element_blank()) +
scale_x_discrete(breaks=c("Contributor", "FreeRider"),labels=c("Contributor", "Free Rider")) +
scale_y_continuous(limits=c(1,4),oob=squish,expand = c(0,0))+
ylab("Rating (1 = most negative, 4 = most positive)") +
xlab("Target") +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
theme(legend.title=element_blank()) +
scale_fill_manual(values=c("#99CC99", "#FFCC99"),breaks=c("Co", "Or"),labels=c("Unintentional Free-Riding", "Intentional Free-Riding")) +
geom_hline(yintercept = 2.5, linetype=2, color='black')+
guides(fill = guide_legend(reverse = TRUE))+ #reverse the legend order
ggtitle("4-5-year-olds") + theme(plot.title=element_text(hjust = "0", face="bold"))+
theme(legend.position="top") +
theme(legend.direction="horizontal")+
theme(plot.title = element_text(size = 12, face = "bold") , legend.text=element_text(size=9))+
theme(axis.text=element_text(size=10,face="bold"), axis.title=element_text(size=10,face="bold")))
graph2
library(scales)
# Study2
substrRight <- function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
longStudy2Graph <- repdata %>%
dplyr::select(ID,5:12) %>%
gather(condition,response,Original_FR_Judgment:Original_Con_Preference, Comparison_FR_Judgment:Comparison_Con_Preference) %>%
mutate(Ttype=substr(condition,1,2)) %>%
mutate (Ctype=ifelse(grepl("FR",condition),"FreeRider","Contributor"))
longStudy2Graph$Ttype<-factor(longStudy2Graph$Ttype,levels=c("Or","Co"))#Change the order for Ttype
longStudy2Graph$Ctype<-factor(longStudy2Graph$Ctype,levels=c("FreeRider","Contributor"))#change the order for Ctype
reordergraph2 <- ggplot(longStudy2Graph,aes(x=Ctype, y = response, width=.65, fill = as.factor(Ttype))) +
stat_summary(fun.y=mean, geom="bar", position=position_dodge()) +
stat_summary(fun.data="mean_cl_boot", geom="errorbar",  aes(width=.15), position=position_dodge(.65))
reordergraph2
graph2<-(reordergraph2 +
theme(legend.title=element_blank()) +
scale_x_discrete(breaks=c("Contributor", "FreeRider"),labels=c("Contributor", "Free Rider")) +
scale_y_continuous(limits=c(1,4),oob=squish,expand = c(0,0))+
ylab("Rating (1 = most negative, 4 = most positive)") +
xlab("Target") +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+
theme(legend.title=element_blank()) +
scale_fill_manual(values=c("#99CC99", "#FFCC99"),breaks=c("Co", "Or"),labels=c("Unintentional Free-Riding", "Intentional Free-Riding")) +
geom_hline(yintercept = 2.5, linetype=2, color='black')+
guides(fill = guide_legend(reverse = TRUE))+ #reverse the legend order
ggtitle("4-5-year-olds") + theme(plot.title=element_text(hjust = "0", face="bold"))+
theme(legend.position="top") +
theme(legend.direction="horizontal")+
theme(plot.title = element_text(size = 12, face = "bold") , legend.text=element_text(size=9))+
theme(axis.text=element_text(size=10,face="bold"), axis.title=element_text(size=10,face="bold")))
graph2
library(tidyverse)
head(diamonds)
qplot(diamonds$carat, diamonds$price)
qplot(diamonds$price)
qplot(data=diamonds,
x=carat, y=price, shape=clarity, color=cut)
p <- ggplot(diamonds, aes(x=carat, y=price)) # first you set the aesthetic and dataset
p + geom_point() # then you add geoms
p + geom_point(aes(colour = carat)) # and you can keep doing this to add layers to the plot
p <- ggplot(diamonds,
aes(x=carat, y=price))+ # first you set the aesthetic and dataset
geom_point(aes(colour = carat)) # and you can keep doing this to add layers to the plot
p <- ggplot(diamonds,
aes(x=carat, y=price))+ # first you set the aesthetic and dataset
geom_point(aes(colour = carat)) # and you can keep doing this to add layers to the plot
ggplot(diamonds,
aes(x=carat, y=price))+ # first you set the aesthetic and dataset
geom_point(aes(colour = carat)) # and you can keep doing this to add layers to the plot
ggplot(diamonds,
aes(x=carat, y=price,
shape=clarity, color=cut))+
geom_point()
ggplot(diamonds,
aes(x=carat, y=price,
shape=clarity, color=cut))+
geom_point() +
facet_grid(clarity ~ cut)
ggplot(diamonds,
aes(x=carat, y=price,
shape=clarity))+
geom_point() +
facet_grid(clarity ~ cut)
ggplot(diamonds,
aes(x=carat, y=price,
shape=clarity, color=cut))+
geom_point() +
facet_grid(clarity ~ cut)
ggplot(diamonds,
aes(x=carat, y=price,
shape=clarity, color=cut))+
geom_point() +
geom_smooth()
facet_grid(clarity ~ cut)
ggplot(diamonds,
aes(x=carat, y=price,
shape=clarity, color=cut))+
geom_point() +
geom_smooth(method="lm")
facet_grid(clarity ~ cut)
ggplot(diamonds,
aes(x=carat, y=price,
color=cut))+
geom_point() +
geom_smooth(method="lm")
facet_grid(clarity ~ cut)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(color=cut)) +
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")
facet_grid(clarity ~ cut)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")
facet_grid(. ~ cut)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")+
facet_grid(. ~ cut)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")+
facet_wrap(~ clarity)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")+
facet_wrap(~cut)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=clarity)) +
geom_smooth(method="lm")+
facet_wrap(~cut)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")+
facet_wrap(~cut)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")+
facet_wrap(~cut)
ggsave("~/Desktop/Diamonds.pdf",
plot = p)
pdf(width=7,height=4)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")+
facet_wrap(~cut)
dev.off()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
facet_grid(cut ~ clarity)
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
geom_density()+
facet_grid(cut ~ clarity)
ggplot(diamonds,
aes(x=carat, y=price))+
geom_point(aes(color=cut)) +
geom_smooth(method="lm")+
facet_wrap(~cut)
ggsave("~/Desktop/Diamonds.pdf",
plot = p)
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
geom_smooth(method = "lm")
facet_grid(cut ~ clarity)
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
facet_grid(cut ~ clarity)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("TomHardwicke/Reports")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("TomHardwicke/ReproReports")
install.packages("devtools")
devtools::install_github("TomHardwicke/ReproReports")
library("ReproReports")
install.packages("devtools")
devtools::install_github("TomHardwicke/ReproReports")
library("ReproReports")
install.packages("devtools")
devtools::install_github("TomHardwicke/ReproReports")
library("ReproReports")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("TomHardwicke/ReproReports")
library("ReproReports")
install.packages("devtools")
devtools::install_github("TomHardwicke/ReproReports")
library("ReproReports")
install.packages("devtools")
library("ReproReports")
install.packages("devtools")
devtools::install_github("TomHardwicke/ReproReports")
library("ReproReports")
force = TRUE
install.packages("devtools")
install.packages("devtools")
library("devtools", lib.loc="~/Library/R/3.5/library")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("TomHardwicke/ReproReports")
force =  TRUE
force = TRUE
devtools::install_github("TomHardwicke/ReproReports",force=TRUE)
library("ReproReports")
